#!/bin/bash

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: cat FILE [...] | %q %s\n' "$(basename "$1")" '[-i|--interval INTERVAL[SUFFIX]] [-l|--line-interval LINE-NUM] [-w|--non-whitespace] [-s|--skip PATTERN [...]] [-m|--match PATTERN [...]] [-n|--count N|-1|--once] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 'Try %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Whenever there is output (but at least INTERVAL (default: 1 second) or LINE-NUM
apart), activate the current Tmux pane and window.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    cat <<HELPTEXT
    --interval|-i INTERVAL[SUFFIX]
			    Wait for INTERVAL seconds between executions of
			    COMMANDS, even if there's continuous output. SUFFIX
			    may be 's' for seconds (the default), 'm' for
			    minutes, 'h' for hours or 'd' for days.
    --line-interval|-l LINE-NUM
			    Wait until LINE-NUM lines have been output before
			    doing another execution of COMMANDS. If INTERVAL is
			    also given, one or the other has to be met.
    --non-whitespace|-w	    Only output that does contains at least one
			    non-whitespace character triggers COMMANDS
			    execution.
    --skip|-s PATTERN	    Ignore (but still print) lines that match PATTERN,
			    so that these don't trigger COMMANDS execution.
    --match|-m PATTERN	    Only consider lines that match PATTERN for
			    triggering COMMANDS execution; other lines (and
			    those that also match --skip PATTERN) are ignored.
    --count|-n N	    Stop reacting on new output after N executions of
			    COMMAND.
    --once|-1		    Only execute COMMAND once after the first
			    observation of output.
HELPTEXT
}
case "$1" in
    --help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
esac


# XXX: When tmux-activate-pane is executed with another window active, the query
# of TMUX_WINDOW yields the wrong (current) window when the command is part of a
# pipeline, and onOutput is such. We need to resolve the current pane before the
# pipeline is started or window is switched. (This is also slightly more
# efficient, as we need to do this query only once.)
#exec onOutput "$@" -- tmux-activate-pane

tmuxActivationCommand="$(tmux-activate-pane --get-command)"
exec onOutput "$@" --command "$tmuxActivationCommand"
